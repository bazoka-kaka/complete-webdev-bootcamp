370. GET a Specific Article
===========================

we're gonna use this method:
app.route("/articles/:articleTitle").get(function (req, res) {
  console.log(req.params.articleTitle);
  res.send("/");
});

and then we're gonna have to use the findOne()
so that if we have the match

notice that a space in url is usually represented
by the "%20" example:
jack bauer --> jack%20bauer

note:
this is in the ansi encoding reference:
https://www.w3schools.com/tags/ref_urlencode.asp?_sm_au_=iVVDMg0TSmrMV6Dm

example of a get request using space:
localhost:3000/articles/Jack%20Bauer

this is the single request code:
app.route("/articles/:articleTitle").get(function (req, res) {
  console.log(req.params.articleTitle);
  Article.findOne(
    { title: req.params.articleTitle },
    function (err, foundArticle) {
      //do something here
      if (!err) {
        res.send(foundArticle);
      } else {
        res.send("No article matching that title was found!");
      }
    }
  );
});

this is the final code:
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const express = require("express");

mongoose.connect("mongodb://localhost:27017/wikiDB");

const articleSchema = new mongoose.Schema({
  title: String,
  content: String,
});

const Article = mongoose.model("Article", articleSchema);

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.set("view engine", "ejs");

app.get("/", function (req, res) {
  res.send("Server is up and running");
});

app.route("/articles/:articleTitle").get(function (req, res) {
  console.log(req.params.articleTitle);
  Article.findOne(
    { title: req.params.articleTitle },
    function (err, foundArticle) {
      //do something here
      if (!err) {
        res.send(foundArticle);
      } else {
        res.send("No article matching that title was found!");
      }
    }
  );
});

app
  .route("/articles")
  .get(function (req, res) {
    Article.find(function (err, foundArticles) {
      if (!err) {
        res.send(foundArticles);
      } else {
        console.log(err);
      }
    });
  })
  .post(function (req, res) {
    const newArticle = new Article({
      title: req.body.title,
      content: req.body.content,
    });
    newArticle.save(function (err) {
      if (!err) {
        res.send("Successfully added a new article");
      } else {
        console.log(err);
      }
    });
  })
  .delete(function (req, res) {
    //
    Article.deleteMany(function (err) {
      if (!err) {
        res.send("Successfully deleted all articles.");
      } else {
        res.send(err);
      }
    });
  });

app.listen(3000, function () {
  console.log("Server started at port 3000");
});
