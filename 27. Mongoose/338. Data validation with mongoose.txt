DATA VALIDATION USING MONGOOSE 
==============================

- instead of writing our assert statements, 
and specifying specific things, we can use 
mongoose's built in validation checks:

const fruitSchema = new mongoose.Schema({
  name: String,
  rating: {
    type: Number,
    min: 1,
    max: 10,
  },
  review: String,
});

note:
if we wanna enter something that is beyond 
the constraints, it's gonna return an error 
and is not gonna be saved in your database 

- challenge:
make the name field required you should make it 
such that when we try to add a new fruit 
that doesn't have a name then this is gonna 
refuse to add that entry into our database 

solution:
const fruitSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  rating: {
    type: Number,
    min: 1,
    max: 10,
  },
  review: String,
});

using error message:
const fruitSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, "Please check your data entry, no name specified"],
  },
  rating: {
    type: Number,
    min: 1,
    max: 10,
  },
  review: String,
});

final code:
const mongoose = require("mongoose");

mongoose.connect("mongodb://localhost:27017/fruitDB");

const fruitSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, "Please check your data entry, no name specified"],
  },
  rating: {
    type: Number,
    min: 1,
    max: 10,
  },
  review: String,
});

const Fruit = new mongoose.model("Fruit", fruitSchema);

const apple = new Fruit({
  rating: 5,
  review: "Pretty solid for a fruit.",
});

apple.save();

const personSchema = new mongoose.Schema({
  name: String,
  age: Number,
});

const Person = mongoose.model("Person", personSchema);

const john = new Person({
  name: "John",
  age: 37,
});

// john.save();

const kiwi = new Fruit({
  name: "Kiwi",
  rating: 10,
  review: "The best fruit.",
});

const orange = new Fruit({
  name: "Orange",
  rating: 4,
  review: "Too sour for me.",
});

const banana = new Fruit({
  name: "Banana",
  rating: 3,
  review: "Has a strange shape.",
});

// Fruit.insertMany([kiwi, orange, banana], function (err) {
//   if (err) {
//     console.log(err);
//   } else {
//     console.log("Successfully saved all the fruits to fruitDB");
//   }
// });

// Fruit.find(function (err, fruits) {
//   if (err) {
//     console.log(err);
//   } else {
//     mongoose.connection.close();
//     fruits.forEach(function (fruit) {
//       console.log(fruit.name);
//     });
//   }
// });

